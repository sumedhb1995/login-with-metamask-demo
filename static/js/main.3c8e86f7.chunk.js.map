{"version":3,"sources":["Login/Login.tsx","Profile/Profile.tsx","App/logo.svg","App/App.tsx","index.tsx"],"names":["web3","undefined","Login","onLoggedIn","useState","loading","setLoading","handleAuthenticate","publicAddress","signature","fetch","process","body","JSON","stringify","headers","method","then","response","json","handleSignMessage","a","nonce","eth","personal","sign","Error","handleSignup","handleClick","window","ethereum","alert","enable","Web3","getCoinbase","coinbase","toLowerCase","users","length","catch","err","className","onClick","disabled","Profile","auth","onLoggedOut","user","username","state","setState","useEffect","accessToken","id","jwtDecode","payload","Authorization","seed","htmlFor","name","onChange","value","target","LS_KEY","App","ls","localStorage","getItem","parse","src","logo","alt","removeItem","setItem","dotEnvConfig","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c8e86f7.chunk.js","sourcesContent":["import './Login.css';\n\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\n\nimport { Auth } from '../types';\n\ninterface Props {\n\tonLoggedIn: (auth: Auth) => void;\n}\n\nlet web3: Web3 | undefined = undefined; // Will hold the web3 instance\n\nexport const Login = ({ onLoggedIn }: Props): JSX.Element => {\n\tconst [loading, setLoading] = useState(false); // Loading button state\n\n\tconst handleAuthenticate = ({\n\t\tpublicAddress,\n\t\tsignature,\n\t}: {\n\t\tpublicAddress: string;\n\t\tsignature: string;\n\t}) =>\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/auth`, {\n\t\t\tbody: JSON.stringify({ publicAddress, signature }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\n\tconst handleSignMessage = async ({\n\t\tpublicAddress,\n\t\tnonce,\n\t}: {\n\t\tpublicAddress: string;\n\t\tnonce: string;\n\t}) => {\n\t\ttry {\n\t\t\tconst signature = await web3!.eth.personal.sign(\n\t\t\t\t`I am signing my one-time nonce: ${nonce}`,\n\t\t\t\tpublicAddress,\n\t\t\t\t'' // MetaMask will ignore the password argument here\n\t\t\t);\n\n\t\t\treturn { publicAddress, signature };\n\t\t} catch (err) {\n\t\t\tthrow new Error(\n\t\t\t\t'You need to sign the message to be able to log in.'\n\t\t\t);\n\t\t}\n\t};\n\n\tconst handleSignup = (publicAddress: string) =>\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users`, {\n\t\t\tbody: JSON.stringify({ publicAddress }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\n\tconst handleClick = async () => {\n\t\t// Check if MetaMask is installed\n\t\tif (!(window as any).ethereum) {\n\t\t\twindow.alert('Please install MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!web3) {\n\t\t\ttry {\n\t\t\t\t// Request account access if needed\n\t\t\t\tawait (window as any).ethereum.enable();\n\n\t\t\t\t// We don't know window.web3 version, so we use our own instance of Web3\n\t\t\t\t// with the injected provider given by MetaMask\n\t\t\t\tweb3 = new Web3((window as any).ethereum);\n\t\t\t} catch (error) {\n\t\t\t\twindow.alert('You need to allow MetaMask.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst coinbase = await web3.eth.getCoinbase();\n\t\tif (!coinbase) {\n\t\t\twindow.alert('Please activate MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst publicAddress = coinbase.toLowerCase();\n\t\tsetLoading(true);\n\n\t\t// Look if user with current publicAddress is already present on backend\n\t\tfetch(\n\t\t\t`${process.env.REACT_APP_BACKEND_URL}/users?publicAddress=${publicAddress}`\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t// If yes, retrieve it. If no, create it.\n\t\t\t.then((users) =>\n\t\t\t\tusers.length ? users[0] : handleSignup(publicAddress)\n\t\t\t)\n\t\t\t// Popup MetaMask confirmation modal to sign message\n\t\t\t.then(handleSignMessage)\n\t\t\t// Send signature to backend on the /auth route\n\t\t\t.then(handleAuthenticate)\n\t\t\t// Pass accessToken back to parent component (to save it in localStorage)\n\t\t\t.then(onLoggedIn)\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tPlease select your login method.\n\t\t\t\t<br />\n\t\t\t\tFor the purpose of this demo, only MetaMask login is\n\t\t\t\timplemented.\n\t\t\t</p>\n\t\t\t<button className=\"Login-button Login-mm\" onClick={handleClick}>\n\t\t\t\t{loading ? 'Loading...' : 'Login with MetaMask'}\n\t\t\t</button>\n\t\t\t<button className=\"Login-button Login-fb\" disabled>\n\t\t\t\tLogin with Facebook\n\t\t\t</button>\n\t\t\t<button className=\"Login-button Login-email\" disabled>\n\t\t\t\tLogin with Email\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n","import './Profile.css';\n\nimport jwtDecode from 'jwt-decode';\nimport React, { useState, useEffect } from 'react';\nimport Blockies from 'react-blockies';\n\nimport { Auth } from '../types';\n\ninterface Props {\n\tauth: Auth;\n\tonLoggedOut: () => void;\n}\n\ninterface State {\n\tloading: boolean;\n\tuser?: {\n\t\tid: number;\n\t\tusername: string;\n\t};\n\tusername: string;\n}\n\ninterface JwtDecoded {\n\tpayload: {\n\t\tid: string;\n\t\tpublicAddress: string;\n\t};\n}\n\nexport const Profile = ({ auth, onLoggedOut }: Props): JSX.Element => {\n\tconst [state, setState] = useState<State>({\n\t\tloading: false,\n\t\tuser: undefined,\n\t\tusername: '',\n\t});\n\n\tuseEffect(() => {\n\t\tconst { accessToken } = auth;\n\t\tconst {\n\t\t\tpayload: { id },\n\t\t} = jwtDecode<JwtDecoded>(accessToken);\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${id}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => setState({ ...state, user }))\n\t\t\t.catch(window.alert);\n\t}, []);\n\n\tconst handleChange = ({\n\t\ttarget: { value },\n\t}: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetState({ ...state, username: value });\n\t};\n\n\tconst handleSubmit = () => {\n\t\tconst { accessToken } = auth;\n\t\tconst { user, username } = state;\n\n\t\tsetState({ ...state, loading: true });\n\n\t\tif (!user) {\n\t\t\twindow.alert(\n\t\t\t\t'The user id has not been fetched yet. Please try again in 5 seconds.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${user.id}`, {\n\t\t\tbody: JSON.stringify({ username }),\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => setState({ ...state, loading: false, user }))\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tsetState({ ...state, loading: false });\n\t\t\t});\n\t};\n\n\tconst { accessToken } = auth;\n\n\tconst {\n\t\tpayload: { publicAddress },\n\t} = jwtDecode<JwtDecoded>(accessToken);\n\n\tconst { loading, user } = state;\n\n\tconst username = user && user.username;\n\n\treturn (\n\t\t<div className=\"Profile\">\n\t\t\t<p>\n\t\t\t\tLogged in as <Blockies seed={publicAddress} />\n\t\t\t</p>\n\t\t\t<div>\n\t\t\t\tMy username is {username ? <pre>{username}</pre> : 'not set.'}{' '}\n\t\t\t\tMy publicAddress is <pre>{publicAddress}</pre>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label htmlFor=\"username\">Change username: </label>\n\t\t\t\t<input name=\"username\" onChange={handleChange} />\n\t\t\t\t<button disabled={loading} onClick={handleSubmit}>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<p>\n\t\t\t\t<button onClick={onLoggedOut}>Logout</button>\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import './App.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport { Login } from '../Login';\nimport { Profile } from '../Profile/Profile';\nimport { Auth } from '../types';\nimport logo from './logo.svg';\n\nconst LS_KEY = 'login-with-metamask:auth';\n\ninterface State {\n\tauth?: Auth;\n}\n\nexport const App = (): JSX.Element => {\n\tconst [state, setState] = useState<State>({});\n\n\tuseEffect(() => {\n\t\t// Access token is stored in localstorage\n\t\tconst ls = window.localStorage.getItem(LS_KEY);\n\t\tconst auth = ls && JSON.parse(ls);\n\t\tsetState({ auth });\n\t}, []);\n\n\tconst handleLoggedIn = (auth: Auth) => {\n\t\tlocalStorage.setItem(LS_KEY, JSON.stringify(auth));\n\t\tsetState({ auth });\n\t};\n\n\tconst handleLoggedOut = () => {\n\t\tlocalStorage.removeItem(LS_KEY);\n\t\tsetState({ auth: undefined });\n\t};\n\n\tconst { auth } = state;\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<h1 className=\"App-title\">\n\t\t\t\t\tWelcome to Login with MetaMask Demo\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<div className=\"App-intro\">\n\t\t\t\t{auth ? (\n\t\t\t\t\t<Profile auth={auth} onLoggedOut={handleLoggedOut} />\n\t\t\t\t) : (\n\t\t\t\t\t<Login onLoggedIn={handleLoggedIn} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import './index.css';\n\nimport { config as dotEnvConfig } from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\n// Load ENV variables\ndotEnvConfig({\n\tpath:\n\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t? '.env.production'\n\t\t\t: '.env.development',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}